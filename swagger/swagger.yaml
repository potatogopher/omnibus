basePath: /
consumes:
- application/json
- application/xml
- application/gob
- application/x-gob
definitions:
  CreatePostPayload:
    properties:
      content:
        description: Content of the blog post
        type: string
      title:
        description: Title of the blog post
        type: string
    required:
    - title
    - content
    title: CreatePostPayload
    type: object
  CreateUserPayload:
    properties:
      disabled:
        description: Flag for if the user is disabled or not
        type: boolean
      email:
        description: Email of user
        format: email
        type: string
      givenName:
        type: string
      password:
        type: string
      surname:
        description: Surname of user
        type: string
    required:
    - email
    - password
    title: CreateUserPayload
    type: object
  TokenAuthPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    title: TokenAuthPayload
    type: object
  UpdatePostPayload:
    properties:
      content:
        description: Content of the blog post
        type: string
      title:
        description: Title of the blog post
        type: string
    title: UpdatePostPayload
    type: object
  UpdateUserPayload:
    properties:
      disabled:
        description: Flag for if the user is disabled or not
        type: boolean
      email:
        description: Email of user
        format: email
        type: string
      givenName:
        type: string
      newPassword:
        type: string
      oldPassword:
        type: string
      surname:
        description: Surname of user
        type: string
    title: UpdateUserPayload
    type: object
host: localhost
info:
  contact:
    email: nick@rucci.io
    name: Nick Rucci
    url: http://rucci.io
  description: Blog for Nick Rucci
  license:
    name: MIT
    url: https://github.com/nicholasrucci/goa-atlas/blob/master/LICENSE
  title: rucci.io
  version: ""
paths:
  auth/token:
    post:
      description: Obtain an access token
      operationId: auth#token
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/TokenAuthPayload'
      responses:
        "200":
          description: OK
      schemes:
      - http
  posts:
    post:
      description: |
        Create new post

        ** Required security scopes**:
      operationId: post#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreatePostPayload'
      responses:
        "201":
          description: Resource created
          headers:
            Location:
              description: href to created resource
              pattern: /posts/[0-9]+
              type: string
      schemes:
      - http
  posts/{postID}:
    delete:
      description: |2


        ** Required security scopes**:
      operationId: post#delete
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
      schemes:
      - http
    get:
      description: |
        Retrieve post with given id.

        ** Required security scopes**:
      operationId: post#show
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      schemes:
      - http
    put:
      description: |
        Change post attributes

        ** Required security scopes**:
      operationId: post#update
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdatePostPayload'
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
      schemes:
      - http
  users:
    post:
      description: Create new user
      operationId: user#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateUserPayload'
      responses:
        "201":
          description: Resource created
          headers:
            Location:
              description: href to created resource
              pattern: /user/[0-9]+
              type: string
      schemes:
      - http
  users/{userID}:
    delete:
      operationId: user#delete
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
      schemes:
      - http
    get:
      description: Retrieve user with given id.
      operationId: user#show
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      schemes:
      - http
    put:
      description: Change user attributes
      operationId: user#update
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserPayload'
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
      schemes:
      - http
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
schemes:
- http
securityDefinitions:
  jwt:
    description: |2-


      **Token URL**: <a href='http://example.com/token'>http://example.com/token</a>

      **Security Scopes**:
        * `post:read`: Read anything in there
        * `post:write`: Write to the system
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
